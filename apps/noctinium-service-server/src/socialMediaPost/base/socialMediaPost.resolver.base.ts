/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SocialMediaPost } from "./SocialMediaPost";
import { SocialMediaPostCountArgs } from "./SocialMediaPostCountArgs";
import { SocialMediaPostFindManyArgs } from "./SocialMediaPostFindManyArgs";
import { SocialMediaPostFindUniqueArgs } from "./SocialMediaPostFindUniqueArgs";
import { CreateSocialMediaPostArgs } from "./CreateSocialMediaPostArgs";
import { UpdateSocialMediaPostArgs } from "./UpdateSocialMediaPostArgs";
import { DeleteSocialMediaPostArgs } from "./DeleteSocialMediaPostArgs";
import { Event } from "../../event/base/Event";
import { SocialMediaPostService } from "../socialMediaPost.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SocialMediaPost)
export class SocialMediaPostResolverBase {
  constructor(
    protected readonly service: SocialMediaPostService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SocialMediaPost",
    action: "read",
    possession: "any",
  })
  async _socialMediaPostsMeta(
    @graphql.Args() args: SocialMediaPostCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SocialMediaPost])
  @nestAccessControl.UseRoles({
    resource: "SocialMediaPost",
    action: "read",
    possession: "any",
  })
  async socialMediaPosts(
    @graphql.Args() args: SocialMediaPostFindManyArgs
  ): Promise<SocialMediaPost[]> {
    return this.service.socialMediaPosts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SocialMediaPost, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SocialMediaPost",
    action: "read",
    possession: "own",
  })
  async socialMediaPost(
    @graphql.Args() args: SocialMediaPostFindUniqueArgs
  ): Promise<SocialMediaPost | null> {
    const result = await this.service.socialMediaPost(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SocialMediaPost)
  @nestAccessControl.UseRoles({
    resource: "SocialMediaPost",
    action: "create",
    possession: "any",
  })
  async createSocialMediaPost(
    @graphql.Args() args: CreateSocialMediaPostArgs
  ): Promise<SocialMediaPost> {
    return await this.service.createSocialMediaPost({
      ...args,
      data: {
        ...args.data,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SocialMediaPost)
  @nestAccessControl.UseRoles({
    resource: "SocialMediaPost",
    action: "update",
    possession: "any",
  })
  async updateSocialMediaPost(
    @graphql.Args() args: UpdateSocialMediaPostArgs
  ): Promise<SocialMediaPost | null> {
    try {
      return await this.service.updateSocialMediaPost({
        ...args,
        data: {
          ...args.data,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SocialMediaPost)
  @nestAccessControl.UseRoles({
    resource: "SocialMediaPost",
    action: "delete",
    possession: "any",
  })
  async deleteSocialMediaPost(
    @graphql.Args() args: DeleteSocialMediaPostArgs
  ): Promise<SocialMediaPost | null> {
    try {
      return await this.service.deleteSocialMediaPost(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async getEvent(
    @graphql.Parent() parent: SocialMediaPost
  ): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
